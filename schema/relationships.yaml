# Relationship taxonomy for the Rimidi knowledge graph.
# Keys should match Neo4j relationship types.

relationships:
  # Product Graph
  - type: ENABLES
    description: Product capability provides required functionality to an end-user workflow.
    source: ProductCapability
    target: EndUserWorkflow
  - type: DELIVERS
    description: Product capability delivers or proves out a specific use case outcome.
    source: ProductCapability
    target: UseCase
  - type: SUPPORTS
    description: Operational or application service underpins a business use case.
    source:
      - Service
      - DataService
      - ToolingService
    target: UseCase
  - type: SUPPORTS_TROUBLESHOOTING
    description: Capability or runtime service documented by a support workflow for incident response or recovery.
    source:
      - ProductCapability
      - Service
      - DataService
    target: SupportWorkflow
  - type: IMPLEMENTS
    description: Workflow leverages an integration or shared data service to execute steps.
    source: EndUserWorkflow
    target:
      - IntegrationPartner
      - EMRIntegration
      - DeviceIntegration
      - DataService
  - type: HAS_COMPONENT
    description: Capability or service is composed of a UI component surfaced to users.
    source:
      - ProductCapability
      - Service
    target: UIComponent

  # Cross-cutting governance
  - type: OWNS
    description: Team accountable for an asset across product, platform, or client contexts.
    source: Team
    target:
      - ProductCapability
      - UseCase
      - EndUserWorkflow
      - SupportWorkflow
      - Service
      - ToolingService
      - DataService
      - Reporting
      - Observability
      - InfraService
      - Client
      - DeploymentType
      - IntegrationPartner
      - EMRIntegration
      - DeviceIntegration
      - CommChannel
      - CodeArtifact
      - ReleaseVersion
  - type: ADMINISTERED_BY
    description: Tooling service managed day-to-day by a specific team.
    source: ToolingService
    target: Team
  - type: RESPONSIBLE_FOR
    description: Team charged with ongoing operations or quality of a workflow, integration, or service.
    source: Team
    target:
      - Service
      - DataService
      - Reporting
      - Observability
      - EndUserWorkflow
      - SupportWorkflow
      - IntegrationPartner
      - EMRIntegration
      - DeviceIntegration
      - CommChannel
      - Client
  - type: REQUESTED_BY
    description: Actor initiating a change, deployment, or configuration update for a Rimidi asset.
    source: Actor
    target:
      - Service
      - DataService
      - DeploymentType
      - ReleaseVersion
  - type: APPROVED_BY
    description: Actor approving a change, deployment, or configuration update for a Rimidi asset.
    source: Actor
    target:
      - Service
      - DataService
      - DeploymentType
      - ReleaseVersion
  - type: GOVERNS
    description: Team-defined guardrail that constrains how a deployment type, service, or client handles data.
    source: Team
    target:
      - DeploymentType
      - Service
      - DataService
      - Client

  # Platform Architecture
  - type: DEPENDS_ON
    description: Service-level dependency across Rimidi services or data pipelines.
    source:
      - Service
      - DataService
    target:
      - Service
      - DataService
    properties:
      dependency_type:
        type: string
        allowed: [api, schedule, logging, data, delivery, ui]
  - type: RUNS_ON
    description: Service, data pipeline, or reporting surface hosted on infrastructure.
    source:
      - Service
      - DataService
      - Reporting
      - Observability
    target: InfraService
    properties:
      environment:
        type: string
        required: false
        allowed: [production, staging, development]
  - type: SCHEDULED_BY
    description: Service or data pipeline triggered by an infrastructure primitive.
    source:
      - Service
      - DataService
    target: InfraService
  - type: USES_SECRET_FROM
    description: Service or pipeline retrieves credentials or configuration from an infrastructure primitive.
    source:
      - Service
      - DataService
    target: InfraService
  - type: MONITORED_BY
    description: Service, data pipeline, or report surface monitored by an observability tool.
    source:
      - Service
      - DataService
      - Reporting
    target: Observability
  - type: REPORTS_ON
    description: Reporting package or telemetry surface summarizes metrics for a capability, service, or pipeline.
    source: Reporting
    target:
      - ProductCapability
      - UseCase
      - Service
      - DataService
  - type: FEEDS
    description: Data service publishes curated datasets or metrics into reporting or observability surfaces.
    source: DataService
    target:
      - Reporting
      - Observability
  - type: SOURCED_FROM
    description: Data service ingests data from an upstream service, integration, or reporting surface.
    source: DataService
    target:
      - Service
      - IntegrationPartner
      - EMRIntegration
      - DeviceIntegration
      - Reporting
  - type: STORED_IN
    description: Reporting or observability asset persists data within an infrastructure primitive.
    source:
      - Reporting
      - Observability
    target: InfraService
  - type: USES_CODE
    description: Runtime service or pipeline implemented by a specific code artifact.
    source:
      - Service
      - DataService
      - ToolingService
    target: CodeArtifact
  - type: TRIGGERS
    description: Release version or incident triggers downstream services or workflows.
    source: ReleaseVersion
    target:
      - Service
      - DataService
      - EndUserWorkflow
      - SupportWorkflow
  - type: RESULTED_IN
    description: Release version produces new reporting, observability, or service state.
    source: ReleaseVersion
    target:
      - Service
      - DataService
      - Reporting
      - Observability

  # Shared / CRM
  - type: PROVIDES_CHANNEL
    description: Service exposes a communication pathway to end users or partners.
    source: Service
    target: CommChannel
  - type: MANUFACTURED_BY
    description: Device integration associated with a device vendor for traceability.
    source: DeviceIntegration
    target: DeviceVendor
  - type: INTEGRATES_WITH
    description: Service connects to an external partner integration for data exchange or automation.
    source:
      - Service
      - DataService
    target:
      - IntegrationPartner
      - EMRIntegration
      - DeviceIntegration
